# Default values for s3proxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Number of S3Proxy replicas
replicaCount: 1

image:
  # -- S3Proxy image repository
  repository: andrewgaul/s3proxy
  # -- Image pull policy
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion
  tag: ""

# -- Image pull secrets
imagePullSecrets: []
# -- String to partially override s3proxy.fullname template
nameOverride: ""
# -- String to fully override s3proxy.fullname template
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Annotations to add to the pod
podAnnotations: {}

# -- Pod security context
podSecurityContext: {}

# -- Container security context
securityContext: {}

service:
  # -- Kubernetes service type
  type: ClusterIP
  # -- Service port
  port: 8080
  # -- Target port (controls both the container port and S3Proxy bind port)
  targetPort: 8080
  # -- Service annotations
  annotations: {}

ingress:
  # -- Enable ingress
  enabled: false
  # -- Ingress class name
  className: ""
  # -- Ingress annotations
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Ingress hosts configuration
  hosts: []
  #  - host: chart-example.local
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  # -- TLS configuration
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- Resource limits and requests
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  # -- Enable HPA
  enabled: false
  # -- Minimum number of replicas
  minReplicas: 1
  # -- Maximum number of replicas
  maxReplicas: 100
  # -- Target CPU utilization percentage
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Node selector for pod assignment
nodeSelector: {}

# -- Tolerations for pod assignment
tolerations: []

# -- Affinity for pod assignment
affinity: {}

config:
  # -- Authorization type (none, aws-v2, aws-v4, aws-v2-or-v4)
  authorization: "aws-v4"

  # -- S3 Access Key ID for client authentication
  identity: ""
  # -- S3 Secret Access Key for client authentication
  credential: ""

  # -- Virtual Host configuration
  virtualHost: ""

  cors:
    # -- Enable CORS support
    enabled: false
    # -- Allowed origins (e.g., ["https://example.com", "https://.+\\.example\\.com"])
    allowOrigins: []
    # -- Allowed methods
    allowMethods: ["GET", "PUT", "POST", "HEAD", "DELETE"]
    # -- Allowed headers
    allowHeaders: ["Accept", "Content-Type"]
    # -- Allow credentials
    allowCredential: false

  buckets:
    # -- Map virtual bucket names to actual backend buckets
    alias: {}
      # example-bucket: "real-bucket-name"

    # -- Assign specific buckets to different backends (glob patterns supported)
    locator: []
      # - "bucket1"
      # - "bucket2"
      # - "*.test"  # glob pattern supported

  middlewares:
    # -- Make backend read-only
    readOnly: false
    # -- Enable eventual consistency modeling
    eventualConsistency: false
    # -- Enable sharded backend containers
    shardedBackend: false
    # -- Enable large object mocking
    largeObjectMocking: false

  backend:
    # -- Backend provider type (filesystem, filesystem-nio2, transient, transient-nio2, aws-s3, s3, azureblob, azureblob-sdk, b2, google-cloud-storage, openstack-swift, rackspace-cloudfiles-uk, rackspace-cloudfiles-us)
    provider: "filesystem-nio2"

    filesystem:
      # -- Base directory for filesystem backend
      basedir: "/data/s3proxy"

    awsS3:
      # -- AWS region
      region: ""
      # -- S3 endpoint
      endpoint: ""
      # -- AWS Access Key ID for backend
      accessKeyId: ""
      # -- AWS Secret Access Key for backend
      secretAccessKey: ""

    azureblob:
      # -- Storage account name
      account: ""
      # -- Storage account key
      key: ""
      # -- Azure endpoint
      endpoint: ""
      # -- SAS token
      sasToken: ""

    googleCloudStorage:
      # -- GCP project ID
      projectId: ""
      # -- Private key ID
      privateKeyId: ""
      # -- Private key
      privateKey: ""
      # -- Service account email
      clientEmail: ""
      # -- Client ID
      clientId: ""

    b2:
      # -- B2 account ID
      account: ""
      # -- B2 application key
      applicationKey: ""

    swift:
      # -- Authentication URL
      authUrl: ""
      # -- Tenant name
      tenantName: ""
      # -- Username
      userName: ""
      # -- Password
      password: ""
      # -- Region
      region: ""

persistence:
  # -- Enable persistence using PVC
  enabled: true
  # -- PVC Access Mode
  accessMode: ReadWriteOnce
  # -- PVC Storage Request
  size: 10Gi
  # -- Storage Class
  # @default -- `""` (uses default StorageClass)
  storageClass: ""
  # -- Use existing PVC
  existingClaim: ""
  # -- PVC annotations
  annotations: {}

# -- Additional environment variables
extraEnvVars: []
  # - name: EXAMPLE_VAR
  #   value: "example-value"

# -- Additional volume mounts
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /extra

# -- Additional volumes
extraVolumes: []
  # - name: extra-volume
  #   emptyDir: {}
