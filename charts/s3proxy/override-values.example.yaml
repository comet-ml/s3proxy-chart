# Example values for s3proxy Helm chart
# This demonstrates a typical configuration using filesystem backend with authentication

# Custom image configuration (optional)
# image:
#   repository: andrewgaul/s3proxy
#   tag: "latest"
#   pullPolicy: Always

# Custom config merge container image configuration (optional)
# configMergeImage:
#   repository: busybox
#   tag: "1.36"
#   pullPolicy: IfNotPresent

# S3Proxy configuration
config:
  # Log level for S3Proxy (DEBUG, INFO, WARN, ERROR)
  logLevel: "INFO"

  auth:
    # Authentication type for clients connecting to S3Proxy
    # Options: none, aws-v2, aws-v4, aws-v2-or-v4
    type: "aws-v4"
    # Credentials for clients to authenticate to S3Proxy
    # These should be changed to secure values
    identity: "admin"
    secret: "changeme123"

  # Enable CORS for web applications
  cors:
    enabled: true
    allowOrigins:
      - "https://myapp.example.com"
    allowMethods:
      - "GET"
      - "PUT"
      - "POST"
      - "HEAD"
      - "DELETE"
    allowHeaders:
      - "Accept"
      - "Content-Type"
      - "Authorization"
    allowCredential: true

  # Storage backend configuration
  # Multiple backends can be enabled simultaneously
  # Properties files will be loaded in order: main properties first, then each backend's properties
  # Later properties can override earlier ones if there are conflicts
  backends:
    # Filesystem backend for local storage
    filesystem:
      enabled: true  # Set to true to use filesystem backend
      nio2: true  # Set to true for NIO2 implementation (filesystem-nio2), false for standard (filesystem)
      basedir: "/data/s3proxy"

    # Transient (in-memory) backend - useful for testing
    transient:
      enabled: false  # Set to true to use transient backend
      nio2: true  # Set to true for NIO2 implementation (transient-nio2), false for standard (transient)

    # S3 backend (AWS S3 or S3-compatible storage)
    s3:
      enabled: false  # Set to true to use S3 backend
      aws: true  # Set to true for AWS S3 (aws-s3 provider), false for generic S3
      region: "us-west-2"
      # endpoint: "https://s3.amazonaws.com"  # Optional custom endpoint (e.g., MinIO, Ceph)
      accessKeyId: "AKIAIOSFODNN7EXAMPLE"
      secretAccessKey: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"

    # Azure Blob Storage backend
    azureblob:
      enabled: false  # Set to true to use Azure Blob backend
      provider: "azureblob"  # Can be "azureblob" or "azureblob-sdk"
      account: "mystorageaccount"
      key: "base64encodedkey=="
      # endpoint: "https://mystorageaccount.blob.core.windows.net"  # Optional
      # sasToken: ""  # Optional SAS token

    # Google Cloud Storage backend
    googleCloudStorage:
      enabled: false  # Set to true to use GCS backend
      projectId: "my-project"

      # Service account email or user email (required for both authentication methods)
      clientEmail: "service-account@my-project.iam.gserviceaccount.com"

      # Option 1: Using privateKey directly
      privateKey: "-----BEGIN RSA PRIVATE KEY-----\n..."

      # Option 2: Using JSON credentials file (preferred for GCP)
      # This provides the credential (privateKey) via a mounted file
      jsonCredentials:
        enabled: false  # Set to true to use JSON credentials

        # Either provide the JSON content directly:
        # jsonContent: |
        #   {
        #     "type": "service_account",
        #     "project_id": "my-project",
        #     "private_key_id": "key-id",
        #     "private_key": "-----BEGIN RSA PRIVATE KEY-----\n...",
        #     "client_email": "service-account@my-project.iam.gserviceaccount.com",
        #     "client_id": "...",
        #     "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        #     "token_uri": "https://oauth2.googleapis.com/token",
        #     "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        #     "client_x509_cert_url": "..."
        #   }

        # Or reference an existing secret containing the JSON:
        # existingSecret: "my-gcp-credentials-secret"
        # secretKey: "credentials.json"  # Key in the secret containing the JSON (default: credentials.json)

    # Backblaze B2 backend
    b2:
      enabled: false  # Set to true to use B2 backend
      account: "account-id"
      applicationKey: "application-key"

    # OpenStack Swift backend
    openstackSwift:
      enabled: false  # Set to true to use Swift backend
      authUrl: "https://auth.cloud.com/v2.0"
      tenantName: "my-tenant"
      userName: "my-user"
      password: "my-password"
      region: "RegionOne"

    # Rackspace Cloud Files backend
    rackspaceCloudfiles:
      enabled: false  # Set to true to use Rackspace Cloud Files backend
      region: "us"  # Region: "us" or "uk"
      userName: "my-user"
      apiKey: "my-api-key"

# Persistence settings for filesystem backend
persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 100Gi
  # Specify a storageClass if needed
  # storageClass: "fast-ssd"

  # Use an existing PVC instead of creating a new one
  # existingClaim: "my-existing-pvc"

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  # For LoadBalancer type, you may want to specify additional annotations
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: s3.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: s3proxy-tls
      hosts:
        - s3.example.com

# Resource limits and requests
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 100m
    memory: 128Mi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Pod security context
podSecurityContext:
  fsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Additional environment variables
extraEnvVars:
  - name: JAVA_OPTS
    value: "-Xmx1g -Xms256m"

# Node selector for pod placement
# nodeSelector:
#   disktype: ssd

# Tolerations for pod scheduling
# tolerations:
#   - key: "dedicated"
#     operator: "Equal"
#     value: "storage"
#     effect: "NoSchedule"

# Affinity rules
# affinity:
#   podAntiAffinity:
#     requiredDuringSchedulingIgnoredDuringExecution:
#       - labelSelector:
#           matchExpressions:
#             - key: app.kubernetes.io/name
#               operator: In
#               values:
#                 - s3proxy
#         topologyKey: kubernetes.io/hostname

