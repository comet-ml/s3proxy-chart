apiVersion: v1
kind: Secret
metadata:
  name: {{ include "s3proxy.fullname" . }}
  labels:
    {{- include "s3proxy.labels" . | nindent 4 }}
type: Opaque
stringData:
  # Properties file containing sensitive configuration values
  # This will be merged with the backend properties files by the init container
  secret.properties: |
{{- if and .Values.config.auth.identity .Values.config.auth.secret }}
    # S3Proxy authentication credentials (for clients connecting to s3proxy)
    s3proxy.identity={{ .Values.config.auth.identity }}
    s3proxy.credential={{ .Values.config.auth.secret }}
{{- end }}

{{- if .Values.config.backends.s3.enabled }}
    # S3 backend credentials
  {{- if .Values.config.backends.s3.accessKeyId }}
    jclouds.identity={{ .Values.config.backends.s3.accessKeyId }}
  {{- end }}
  {{- if .Values.config.backends.s3.secretAccessKey }}
    jclouds.credential={{ .Values.config.backends.s3.secretAccessKey }}
  {{- end }}
{{- else if .Values.config.backends.azureblob.enabled }}
    # Azure Blob backend credentials
  {{- if .Values.config.backends.azureblob.account }}
    jclouds.identity={{ .Values.config.backends.azureblob.account }}
  {{- end }}
  {{- if .Values.config.backends.azureblob.key }}
    jclouds.credential={{ .Values.config.backends.azureblob.key }}
  {{- end }}
  {{- if .Values.config.backends.azureblob.sasToken }}
    jclouds.azureblob.sas={{ .Values.config.backends.azureblob.sasToken }}
  {{- end }}
{{- else if .Values.config.backends.googleCloudStorage.enabled }}
    # Google Cloud Storage backend credentials
  {{- if .Values.config.backends.googleCloudStorage.clientEmail }}
    jclouds.identity={{ .Values.config.backends.googleCloudStorage.clientEmail }}
  {{- end }}
  {{- if .Values.config.backends.googleCloudStorage.privateKey }}
    jclouds.credential={{ .Values.config.backends.googleCloudStorage.privateKey }}
  {{- end }}
{{- else if .Values.config.backends.b2.enabled }}
    # Backblaze B2 backend credentials
  {{- if .Values.config.backends.b2.account }}
    jclouds.identity={{ .Values.config.backends.b2.account }}
  {{- end }}
  {{- if .Values.config.backends.b2.applicationKey }}
    jclouds.credential={{ .Values.config.backends.b2.applicationKey }}
  {{- end }}
{{- else if .Values.config.backends.openstackSwift.enabled }}
    # OpenStack Swift backend credentials
  {{- if .Values.config.backends.openstackSwift.tenantName }}
    {{- if .Values.config.backends.openstackSwift.userName }}
    jclouds.identity={{ printf "%s:%s" .Values.config.backends.openstackSwift.tenantName .Values.config.backends.openstackSwift.userName }}
    {{- end }}
  {{- end }}
  {{- if .Values.config.backends.openstackSwift.password }}
    jclouds.credential={{ .Values.config.backends.openstackSwift.password }}
  {{- end }}
{{- else if .Values.config.backends.rackspaceCloudfiles.enabled }}
    # Rackspace Cloud Files backend credentials
  {{- if .Values.config.backends.rackspaceCloudfiles.userName }}
    jclouds.identity={{ .Values.config.backends.rackspaceCloudfiles.userName }}
  {{- end }}
  {{- if .Values.config.backends.rackspaceCloudfiles.apiKey }}
    jclouds.credential={{ .Values.config.backends.rackspaceCloudfiles.apiKey }}
  {{- end }}
{{- end }}